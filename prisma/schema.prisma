generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filterJson"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique @db.VarChar(120)
  password_hash String?      @db.VarChar(128)
  first_name    String?      @db.VarChar(32)
  last_name     String?      @db.VarChar(32)
  username      String       @db.VarChar(32)
  birthday      DateTime?    @db.Date
  biometrics    Biometric?
  experiences   Experience[]

  @@index([id], map: "User_id_uindex")
  @@index([email], map: "User_email_index")
  @@index([first_name], map: "User_first_name_index")
  @@index([last_name], map: "User_last_name_index")
  @@index([username], map: "User_username_index")
}

model Biometric {
  id      Int  @id @default(autoincrement())
  user_id Int  @unique
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  weight  Int
  height  Int
  sex     sex

  @@index([id], map: "Biometric_id_uindex")
}

model LoginAttempt {
  id       Int       @id @default(autoincrement())
  email    String    @db.VarChar(120)
  token    String?   @db.VarChar
  password String?   @db.VarChar(120)
  at       DateTime? @db.Timestamp

  @@index([id], map: "Login_Attempt_id_uindex")
}

model Substance {
  id                  Int                     @id @default(autoincrement())
  type                substancetype
  names               AlternativeName[]
  primary_name        String
  roas                Roa[]
  summary             String
  addiction_potential Int?                    @db.SmallInt
  toxicity            toxicity
  chemicals           SubstancesOnChemicals[]
  forms               form[]
  primary_form        form
  experiences         Experience[]
  interactions        Json // substance-interactiontype
  cross_tolerances    Json // substance-activity-strength
  image_url           String?

  @@index([id], map: "Substance_id_uindex")
  @@index([primary_name], map: "Substance_name_index")
}

model Chemical {
  id         Int                     @id @default(autoincrement())
  name       String
  salt       String?
  isomer     String?
  formula    String?
  substances SubstancesOnChemicals[]

  @@index([id], map: "Chemical_id_uindex")
  @@index([name], map: "Chemical_name_index")
}

model SubstancesOnChemicals {
  chemical     Chemical  @relation(fields: [chemical_id], references: [id])
  chemical_id  Int
  substance    Substance @relation(fields: [substance_id], references: [id])
  substance_id Int

  @@id([chemical_id, substance_id])
}

model Experience {
  id           Int             @id @default(autoincrement())
  ref          String?         @unique @default(uuid())
  user_id      Int
  user         User            @relation(fields: [user_id], references: [id], onDelete: Cascade)
  substance_id Int
  substance    Substance       @relation(fields: [substance_id], references: [id])
  dosings      Dosing[]
  created      DateTime        @default(now()) @db.Timestamptz(6)
  started      DateTime?       @db.Timestamptz(6)
  completed    DateTime?       @db.Timestamptz(6)
  reflected    DateTime?       @db.Timestamptz(6)
  status       experiencestate @default(started)
  first_time   Boolean         @default(true)
  place        String          @db.VarChar(128)
  roa          roatype
  mood         Int

  @@index([id], map: "Experience_id_uindex")
}

model AlternativeName {
  name         String    @id @unique
  substance_id Int
  substance    Substance @relation(fields: [substance_id], references: [id])

  @@index([name], map: "Alternative_Name_name_uindex")
}

model Roa {
  id              Int          @id @default(autoincrement())
  substance_id    Int
  substance       Substance    @relation(fields: [substance_id], references: [id])
  dose            RoaDose?
  duration        RoaDuration?
  bioavailability Json // min-max-avg
  half_life       Json // min-max-avg

  @@index([id], map: "Roa_id_uindex")
}

model RoaDose {
  id              Int       @id @default(autoincrement())
  roa             Roa       @relation(fields: [roa_id], references: [id])
  roa_id          Int       @unique
  threshold       UnitValue @relation("threshold", fields: [threshold_value, threshold_units], references: [value, units])
  threshold_value Float
  threshold_units String
  heavy           UnitValue @relation("heavy", fields: [heavy_value, heavy_units], references: [value, units])
  heavy_value     Float
  heavy_units     String
  common          UnitRange @relation("common", fields: [common_min, common_max, common_units], references: [min, max, units])
  common_min      Float
  common_max      Float
  common_units    String
  weak            UnitRange @relation("weak", fields: [weak_min, weak_max, weak_units], references: [min, max, units])
  weak_min        Float
  weak_max        Float
  weak_units      String
  strong          UnitRange @relation("strong", fields: [strong_min, strong_max, strong_units], references: [min, max, units])
  strong_min      Float
  strong_max      Float
  strong_units    String

  @@index([id], map: "Roa_Dose_id_uindex")
}

model RoaDuration {
  id              Int       @id @default(autoincrement())
  roa             Roa       @relation(fields: [roa_id], references: [id])
  roa_id          Int       @unique
  afterglow       UnitRange @relation("afterglow", fields: [afterglow_min, afterglow_max, afterglow_units], references: [min, max, units])
  afterglow_min   Float
  afterglow_max   Float
  afterglow_units String
  comeup          UnitRange @relation("comeup", fields: [comeup_min, comeup_max, comeup_units], references: [min, max, units])
  comeup_min      Float
  comeup_max      Float
  comeup_units    String
  duration        UnitRange @relation("duration", fields: [duration_min, duration_max, duration_units], references: [min, max, units])
  duration_min    Float
  duration_max    Float
  duration_units  String
  offset          UnitRange @relation("offset", fields: [offset_min, offset_max, offset_units], references: [min, max, units])
  offset_min      Float
  offset_max      Float
  offset_units    String
  onset           UnitRange @relation("onset", fields: [onset_min, onset_max, onset_units], references: [min, max, units])
  onset_min       Float
  onset_max       Float
  onset_units     String
  peak            UnitRange @relation("peak", fields: [peak_min, peak_max, peak_units], references: [min, max, units])
  peak_min        Float
  peak_max        Float
  peak_units      String
  total           UnitRange @relation("total", fields: [total_min, total_max, total_units], references: [min, max, units])
  total_min       Float
  total_max       Float
  total_units     String

  @@index([id], map: "Roa_Duration_id_uindex")
}

model UnitRange {
  afterglow_for RoaDuration[] @relation("afterglow")
  comeup_for    RoaDuration[] @relation("comeup")
  duration_for  RoaDuration[] @relation("duration")
  offset_for    RoaDuration[] @relation("offset")
  onset_for     RoaDuration[] @relation("onset")
  peak_for      RoaDuration[] @relation("peak")
  total_for     RoaDuration[] @relation("total")
  common_for    RoaDose[]     @relation("common")
  weak_for      RoaDose[]     @relation("weak")
  strong_for    RoaDose[]     @relation("strong")

  min   Float
  max   Float
  units String

  @@id([min, max, units])
}

model UnitValue {
  threshold_for RoaDose[] @relation("threshold")
  heavy_for     RoaDose[] @relation("heavy")
  value         Float
  units         String

  @@id([value, units])
}

model Dosing {
  experience_id Int
  experience    Experience @relation(fields: [experience_id], references: [id])
  dose          Json // UnitValue
  submitted_at  DateTime   @default(now())
  substance     String

  @@id([experience_id, substance, submitted_at])
}

model Interaction {
  name String
  type interactiontype

  @@id([name, type])
}

enum experiencestate {
  planning
  started
  completed
  reflected
}

enum form {
  pill
  liquid
  botanical
  fungus
  powder
  tab
  seed
  crystal
}

enum interactiontype {
  low_risk_synergy
  low_risk_no_synergy
  dangerous
  unpredictable
  reverse_synergy
}

enum roatype {
  oral
  sublingual
  buccal
  insufflated
  rectal
  transdermal
  subcutaneous
  intramuscular
  intravenous
  intrathecal
  smoked
  transconjunctival
}

enum sex {
  male
  female
  other
}

enum substancetype {
  cannabinoids
  empathogens
  stimulants
  psychedelics
  dissociatives
  depressants
  deliriants
  opioids
}

enum toxicity {
  liver
  neural
}
