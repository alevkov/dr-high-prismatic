generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AlternativeName {
  name                     String              @id @unique
  substance_id             Int
  alternativeNameTypeValue String
  AlternativeNameType      AlternativeNameType @relation(fields: [alternativeNameTypeValue], references: [value])
  Substance                Substance           @relation(fields: [substance_id], references: [id])

  @@index([name], map: "Alternative_Name_name_uindex")
  @@index([name], map: "alternative_name_name_uindex")
}

model AlternativeNameType {
  value           String            @id @unique
  AlternativeName AlternativeName[]

  @@index([value], map: "Alternative_Name_Type_value_uindex")
}

model Biometric {
  id       Int     @id @default(autoincrement())
  user_id  Int     @unique
  weight   Int
  height   Int
  sexValue String
  SexType  SexType @relation(fields: [sexValue], references: [value])
  User     User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([id], map: "Biometric_id_uindex")
}

model Chemical {
  id                    Int                     @id @default(autoincrement())
  name                  String
  salt                  String?
  isomer                String?
  formula               String?
  SubstancesOnChemicals SubstancesOnChemicals[]

  @@index([id], map: "Chemical_id_uindex")
  @@index([name], map: "Chemical_name_index")
}

model Dosing {
  id            Int        @id @default(autoincrement())
  experience_id Int
  dose          Json
  submitted_at  DateTime   @default(now())
  substance     String
  Experience    Experience @relation(fields: [experience_id], references: [id])

  @@index([id], map: "Dosing_id_uindex")
}

model Experience {
  id                   Int                 @id @default(autoincrement())
  user_id              Int
  substance_id         Int
  created              DateTime            @default(now())
  started              DateTime?
  completed            DateTime?
  reflected            DateTime?
  first_time           Boolean             @default(true)
  place                String              @db.VarChar(128)
  mood                 Int
  experienceStateValue String
  roaTypeValue         String
  formTypeValue        String
  ExperienceStateType  ExperienceStateType @relation(fields: [experienceStateValue], references: [value])
  FormType             FormType            @relation(fields: [formTypeValue], references: [value])
  RoaType              RoaType             @relation(fields: [roaTypeValue], references: [value])
  Substance            Substance           @relation(fields: [substance_id], references: [id])
  User                 User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  Dosing               Dosing[]
  Note                 Note[]

  @@index([id], map: "Experience_id_uindex")
}

model ExperienceStateType {
  value      String       @id @unique
  Experience Experience[]

  @@index([value], map: "Experience_State_Type_value_uindex")
}

model FormType {
  value      String       @id @unique
  Experience Experience[]
  Substance  Substance[]

  @@index([value], map: "Form_Type_value_uindex")
}

model InteractionType {
  value String @id @unique

  @@index([value], map: "Interaction_Type_value_uindex")
}

model LoginAttempt {
  id       Int       @id @default(autoincrement())
  email    String    @db.VarChar(120)
  token    String?   @db.VarChar
  password String?   @db.VarChar(120)
  at       DateTime? @db.Timestamp(6)

  @@index([id], map: "Login_Attempt_id_uindex")
}

model Note {
  id            Int        @id @default(autoincrement())
  experience_id Int
  note          Json
  submitted_at  DateTime   @default(now())
  substance     String
  Experience    Experience @relation(fields: [experience_id], references: [id])

  @@index([id], map: "Note_id_uindex")
}

model Roa {
  id              Int          @id @default(autoincrement())
  substance_id    Int
  bioavailability Json
  half_life       Json
  roaTypeValue    String
  RoaType         RoaType      @relation(fields: [roaTypeValue], references: [value])
  Substance       Substance    @relation(fields: [substance_id], references: [id])
  RoaDose         RoaDose?
  RoaDuration     RoaDuration?

  @@index([id], map: "Roa_id_uindex")
}

model RoaDose {
  id        Int  @id @default(autoincrement())
  roa_id    Int  @unique
  threshold Json
  heavy     Json
  common    Json
  weak      Json
  strong    Json
  Roa       Roa  @relation(fields: [roa_id], references: [id])

  @@index([id], map: "Roa_Dose_id_uindex")
}

model RoaDuration {
  id        Int  @id @default(autoincrement())
  roa_id    Int  @unique
  afterglow Json
  comeup    Json
  duration  Json
  offset    Json
  onset     Json
  peak      Json
  total     Json
  Roa       Roa  @relation(fields: [roa_id], references: [id])

  @@index([id], map: "Roa_Duration_id_uindex")
}

model RoaType {
  value      String       @id @unique
  Experience Experience[]
  Roa        Roa[]

  @@index([value], map: "Roa_Type_value_uindex")
}

model SexType {
  value     String      @id @unique
  Biometric Biometric[]

  @@index([value], map: "Sex_Type_value_uindex")
}

model Substance {
  id                    Int                     @id @default(autoincrement())
  primary_name          String
  summary               String
  addiction_potential   Int?                    @db.SmallInt
  toxicities            Json
  forms                 Json
  interactions          Json
  cross_tolerances      Json
  image_url             String?
  substanceTypeValue    String
  formValue             String
  FormType              FormType                @relation(fields: [formValue], references: [value])
  SubstanceType         SubstanceType           @relation(fields: [substanceTypeValue], references: [value])
  AlternativeName       AlternativeName[]
  Experience            Experience[]
  Roa                   Roa[]
  SubstancesOnChemicals SubstancesOnChemicals[]

  @@index([id], map: "Substance_id_uindex")
  @@index([primary_name], map: "Substance_name_index")
  @@index([primary_name], map: "substance_name_index")
}

model SubstanceType {
  value     String      @id @unique
  Substance Substance[]

  @@index([value], map: "Substance_Type_value_uindex")
}

model SubstancesOnChemicals {
  chemical_id  Int
  substance_id Int
  Chemical     Chemical  @relation(fields: [chemical_id], references: [id])
  Substance    Substance @relation(fields: [substance_id], references: [id])

  @@id([chemical_id, substance_id])
}

model ToxicityType {
  value String @id @unique

  @@index([value], map: "Toxicity_Type_value_uindex")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique @db.VarChar(120)
  password_hash String?      @db.VarChar(128)
  first_name    String?      @db.VarChar(32)
  last_name     String?      @db.VarChar(32)
  username      String       @db.VarChar(32)
  birthday      DateTime?    @db.Date
  Biometric     Biometric?
  Experience    Experience[]

  @@index([email], map: "User_email_index")
  @@index([first_name], map: "User_first_name_index")
  @@index([id], map: "User_id_uindex")
  @@index([last_name], map: "User_last_name_index")
  @@index([username], map: "User_username_index")
}
