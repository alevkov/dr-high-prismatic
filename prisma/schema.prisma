generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "filterJson", "dataProxy"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int          @id @default(autoincrement())
  email         String       @unique @db.VarChar(120)
  password_hash String?      @db.VarChar(128)
  first_name    String?      @db.VarChar(32)
  last_name     String?      @db.VarChar(32)
  username      String       @db.VarChar(32)
  birthday      DateTime?    @db.Date
  biometrics    Biometric?
  experiences   Experience[]

  @@index([id], map: "User_id_uindex")
  @@index([email], map: "User_email_index")
  @@index([first_name], map: "User_first_name_index")
  @@index([last_name], map: "User_last_name_index")
  @@index([username], map: "User_username_index")
}

model Biometric {
  id      Int     @id @default(autoincrement())
  user_id Int     @unique
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  weight  Int
  height  Int
  sex     SexType @relation(fields: [sexValue], references: [value])

  sexValue String
  @@index([id], map: "Biometric_id_uindex")
}

model LoginAttempt {
  id       Int       @id @default(autoincrement())
  email    String    @db.VarChar(120)
  token    String?   @db.VarChar
  password String?   @db.VarChar(120)
  at       DateTime? @db.Timestamp

  @@index([id], map: "Login_Attempt_id_uindex")
}

model Substance {
  id                  Int                     @id @default(autoincrement())
  type                SubstanceType           @relation(fields: [substanceTypeValue], references: [value])
  names               AlternativeName[]
  primary_name        String
  roas                Roa[]
  summary             String
  addiction_potential Int?                    @db.SmallInt
  toxicities          Json // Toxicity
  chemicals           SubstancesOnChemicals[]
  forms               Json
  primary_form        FormType                @relation(fields: [formValue], references: [value])
  experiences         Experience[]
  interactions        Json // substance-InteractionType
  cross_tolerances    Json // substance-activity-strength
  image_url           String?

  substanceTypeValue String
  formValue          String
  @@index([id], map: "Substance_id_uindex")
  @@index([primary_name], map: "Substance_name_index")
}

model Chemical {
  id         Int                     @id @default(autoincrement())
  name       String
  salt       String?
  isomer     String?
  formula    String?
  substances SubstancesOnChemicals[]

  @@index([id], map: "Chemical_id_uindex")
  @@index([name], map: "Chemical_name_index")
}

model SubstancesOnChemicals {
  chemical     Chemical  @relation(fields: [chemical_id], references: [id])
  chemical_id  Int
  substance    Substance @relation(fields: [substance_id], references: [id])
  substance_id Int

  @@id([chemical_id, substance_id])
}

model Experience {
  id           Int                 @id @default(autoincrement())
  ref          String?             @unique @default(uuid())
  user_id      Int
  user         User                @relation(fields: [user_id], references: [id], onDelete: Cascade)
  substance_id Int
  substance    Substance           @relation(fields: [substance_id], references: [id])
  dosings      Dosing[]
  created      DateTime            @default(now()) @db.Timestamptz(6)
  started      DateTime?           @db.Timestamptz(6)
  completed    DateTime?           @db.Timestamptz(6)
  reflected    DateTime?           @db.Timestamptz(6)
  state        ExperienceStateType @relation(fields: [experienceStateValue], references: [value])
  first_time   Boolean             @default(true)
  place        String              @db.VarChar(128)
  roa          RoaType             @relation(fields: [roaTypeValue], references: [value])
  mood         Int

  experienceStateValue String
  roaTypeValue         String
  @@index([id], map: "Experience_id_uindex")
}

model AlternativeName {
  name         String              @id @unique
  type         AlternativeNameType @relation(fields: [alternativeNameTypeValue], references: [value])
  substance_id Int
  substance    Substance           @relation(fields: [substance_id], references: [id])

  alternativeNameTypeValue String
  @@index([name], map: "Alternative_Name_name_uindex")
}

model Roa {
  id              Int          @id @default(autoincrement())
  type            RoaType      @relation(fields: [roaTypeValue], references: [value])
  substance_id    Int
  substance       Substance    @relation(fields: [substance_id], references: [id])
  dose            RoaDose?
  duration        RoaDuration?
  bioavailability Json
  half_life       Json

  roaTypeValue String
  @@index([id], map: "Roa_id_uindex")
}

model RoaDose {
  id        Int  @id @default(autoincrement())
  roa       Roa  @relation(fields: [roa_id], references: [id])
  roa_id    Int  @unique
  threshold Json // range
  heavy     Json // range
  common    Json // range
  weak      Json // range
  strong    Json // range

  @@index([id], map: "Roa_Dose_id_uindex")
}

model RoaDuration {
  id        Int  @id @default(autoincrement())
  roa       Roa  @relation(fields: [roa_id], references: [id])
  roa_id    Int  @unique
  afterglow Json
  comeup    Json // range
  duration  Json // range
  offset    Json // range
  onset     Json // range
  peak      Json // range
  total     Json // range

  @@index([id], map: "Roa_Duration_id_uindex")
}

model Dosing {
  id            Int        @id @unique
  experience_id Int
  experience    Experience @relation(fields: [experience_id], references: [id])
  dose          Json // unit
  submitted_at  DateTime   @default(now())
  substance     String
}

model ExperienceStateType {
  value String @id @unique

  Experience Experience[]
  @@index([value], map: "Experience_State_Type_value_uindex")
}

model InteractionType {
  value String @id @unique

  @@index([value], map: "Interaction_Type_value_uindex")
}

model FormType {
  value String @id @unique

  Substance Substance[]
  @@index([value], map: "Form_Type_value_uindex")
}

model RoaType {
  value String @id @unique

  Experience Experience[]
  Roa        Roa[]
  @@index([value], map: "Roa_Type_value_uindex")
}

model SexType {
  value String @id @unique

  Biometric Biometric[]
  @@index([value], map: "Sex_Type_value_uindex")
}

model SubstanceType {
  value String @id @unique

  Substance Substance[]
  @@index([value], map: "Substance_Type_value_uindex")
}

model ToxicityType {
  value String @id @unique

  @@index([value], map: "Toxicity_Type_value_uindex")
}

model AlternativeNameType {
  value String @id @unique

  AlternativeName AlternativeName[]
  @@index([value], map: "Alternative_Name_Type_value_uindex")
}
