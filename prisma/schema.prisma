generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alembic_version {
  version_num String @id(map: "alembic_version_pkc") @db.VarChar(32)
}

model biometrics {
  id       Int     @id @default(autoincrement())
  user_id  Int
  user_ref String?
  weight   Int
  height   Int
  sex      sex?
  users    users   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_biometrics_id")
}

model chemicals {
  id        Int     @id @default(autoincrement())
  name      String  @unique(map: "ix_chemicals_name") @db.VarChar(64)
  formula   String  @unique(map: "ix_chemicals_formula") @db.VarChar(64)
  structure String?
  isomer    String? @db.VarChar(64)
  drugs     drugs[]

  @@index([id], map: "ix_chemicals_id")
}

model drug_alt_names {
  id                                          Int     @id @default(autoincrement())
  drug_ref                                    String
  drug_id                                     Int?
  name                                        String  @db.VarChar(128)
  drugs_drug_alt_names_drug_idTodrugs         drugs?  @relation("drug_alt_names_drug_idTodrugs", fields: [drug_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drugs_drug_alt_namesTodrugs_primary_name_id drugs[] @relation("drug_alt_namesTodrugs_primary_name_id")

  @@index([id], map: "ix_drug_alt_names_id")
  @@index([name], map: "ix_drug_alt_names_name")
}

model drug_cross_tolerances {
  drug_a                                    Int
  drug_b                                    Int
  drugs_drug_cross_tolerances_drug_aTodrugs drugs @relation("drug_cross_tolerances_drug_aTodrugs", fields: [drug_a], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drugs_drug_cross_tolerances_drug_bTodrugs drugs @relation("drug_cross_tolerances_drug_bTodrugs", fields: [drug_b], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([drug_a, drug_b])
}

model drug_interactions {
  drug_a                                Int
  drug_b                                Int
  description                           String?
  interaction                           interactiontype?
  drugs_drug_interactions_drug_aTodrugs drugs            @relation("drug_interactions_drug_aTodrugs", fields: [drug_a], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drugs_drug_interactions_drug_bTodrugs drugs            @relation("drug_interactions_drug_bTodrugs", fields: [drug_b], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([drug_a, drug_b])
}

model drug_toxicities {
  id       Int       @id @default(autoincrement())
  drug_id  Int?
  toxicity toxicity?
  drugs    drugs?    @relation(fields: [drug_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_drug_toxicities_id")
}

model drugs {
  id                                                        Int                     @id @default(autoincrement())
  ref                                                       String?                 @unique
  type                                                      substancetype?
  primary_roa_id                                            Int?
  summary                                                   String?
  chemical_id                                               Int?
  salt                                                      Boolean?
  salt_slug                                                 String?                 @db.VarChar(32)
  addiction_potential                                       Int?                    @db.SmallInt
  primary_name_id                                           Int?
  chemicals                                                 chemicals?              @relation(fields: [chemical_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drug_alt_names_drug_alt_namesTodrugs_primary_name_id      drug_alt_names?         @relation("drug_alt_namesTodrugs_primary_name_id", fields: [primary_name_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roas                                                      roas?                   @relation(fields: [primary_roa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drug_alt_names_drug_alt_names_drug_idTodrugs              drug_alt_names[]        @relation("drug_alt_names_drug_idTodrugs")
  drug_cross_tolerances_drug_cross_tolerances_drug_aTodrugs drug_cross_tolerances[] @relation("drug_cross_tolerances_drug_aTodrugs")
  drug_cross_tolerances_drug_cross_tolerances_drug_bTodrugs drug_cross_tolerances[] @relation("drug_cross_tolerances_drug_bTodrugs")
  drug_interactions_drug_interactions_drug_aTodrugs         drug_interactions[]     @relation("drug_interactions_drug_aTodrugs")
  drug_interactions_drug_interactions_drug_bTodrugs         drug_interactions[]     @relation("drug_interactions_drug_bTodrugs")
  drug_toxicities                                           drug_toxicities[]
  rel_drug_roa_drugsTorel_drug_roa_drug_id                  rel_drug_roa[]          @relation("drugsTorel_drug_roa_drug_id")
  rel_drug_roa_drugsTorel_drug_roa_roa_id                   rel_drug_roa[]          @relation("drugsTorel_drug_roa_roa_id")
  rel_formulation_drug                                      rel_formulation_drug[]
  rel_formulation_roa                                       rel_formulation_roa[]

  @@index([id], map: "ix_drugs_id")
}

model experiences {
  user_id         Int?
  user_ref        String?
  formulation_ref String?
  drug_ref        String?
  id              Int              @id @default(autoincrement())
  ref             String?          @unique
  created         DateTime?        @default(now()) @db.Timestamptz(6)
  started         DateTime?        @default(now()) @db.Timestamptz(6)
  completed       DateTime?        @default(now()) @db.Timestamptz(6)
  deleted         DateTime?        @default(now()) @db.Timestamptz(6)
  status          experiencestate?
  first_time      Boolean
  place_slug      String?          @db.VarChar(128)
  roa             roatype?
  dose_id         Int?
  mood            Int?
  unit_values     unit_values?     @relation(fields: [dose_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users           users?           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([completed], map: "ix_experiences_completed")
  @@index([created], map: "ix_experiences_created")
  @@index([deleted], map: "ix_experiences_deleted")
  @@index([id], map: "ix_experiences_id")
  @@index([started], map: "ix_experiences_started")
}

model formulation_alt_names {
  id                                                               Int            @id @default(autoincrement())
  formulation_ref                                                  String
  formulation_id                                                   Int?
  name                                                             String         @db.VarChar(128)
  formulations_formulation_alt_names_formulation_idToformulations  formulations?  @relation("formulation_alt_names_formulation_idToformulations", fields: [formulation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  formulations_formulation_alt_namesToformulations_primary_name_id formulations[] @relation("formulation_alt_namesToformulations_primary_name_id")

  @@index([id], map: "ix_formulation_alt_names_id")
  @@index([name], map: "ix_formulation_alt_names_name")
}

model formulation_images {
  id             Int           @id @default(autoincrement())
  formulation_id Int?
  url            String?
  formulations   formulations? @relation(fields: [formulation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_formulation_images_id")
}

model formulations {
  id                                                                        Int                     @id @default(autoincrement())
  type                                                                      substancetype?
  ref                                                                       String?                 @unique
  primary_roa_id                                                            Int?
  summary                                                                   String?
  addiction_potential                                                       Int?                    @db.SmallInt
  form                                                                      form?
  primary_name_id                                                           Int?
  formulation_alt_names_formulation_alt_namesToformulations_primary_name_id formulation_alt_names?  @relation("formulation_alt_namesToformulations_primary_name_id", fields: [primary_name_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roas                                                                      roas?                   @relation(fields: [primary_roa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  formulation_alt_names_formulation_alt_names_formulation_idToformulations  formulation_alt_names[] @relation("formulation_alt_names_formulation_idToformulations")
  formulation_images                                                        formulation_images[]
  rel_formulation_drug                                                      rel_formulation_drug[]
  rel_formulation_roa                                                       rel_formulation_roa[]

  @@index([id], map: "ix_formulations_id")
}

model rel_drug_roa {
  id                                Int    @id @default(autoincrement())
  drug_id                           Int?
  roa_id                            Int?
  drugs_drugsTorel_drug_roa_drug_id drugs? @relation("drugsTorel_drug_roa_drug_id", fields: [drug_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drugs_drugsTorel_drug_roa_roa_id  drugs? @relation("drugsTorel_drug_roa_roa_id", fields: [roa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_rel_drug_roa_id")
}

model rel_formulation_drug {
  id             Int           @id @default(autoincrement())
  formulation_id Int?
  drug_id        Int?
  drugs          drugs?        @relation(fields: [drug_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  formulations   formulations? @relation(fields: [formulation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_rel_formulation_drug_id")
}

model rel_formulation_roa {
  id             Int           @id @default(autoincrement())
  formulation_id Int?
  roa_id         Int?
  formulations   formulations? @relation(fields: [formulation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drugs          drugs?        @relation(fields: [roa_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([id], map: "ix_rel_formulation_roa_id")
}

model roa_doses {
  id                                         Int         @id @default(autoincrement())
  threshold                                  Float?
  heavy                                      Float?
  units                                      String?     @db.VarChar(8)
  common_id                                  Int?
  weak_id                                    Int?
  strong_id                                  Int?
  roa_ranges_roa_doses_common_idToroa_ranges roa_ranges? @relation("roa_doses_common_idToroa_ranges", fields: [common_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_ranges_roa_doses_strong_idToroa_ranges roa_ranges? @relation("roa_doses_strong_idToroa_ranges", fields: [strong_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_ranges_roa_doses_weak_idToroa_ranges   roa_ranges? @relation("roa_doses_weak_idToroa_ranges", fields: [weak_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roas                                       roas[]

  @@index([id], map: "ix_roa_doses_id")
}

model roa_duration_ranges {
  id                                                            Int             @id @default(autoincrement())
  min                                                           Float?
  max                                                           Float?
  units                                                         String?         @db.VarChar(8)
  roa_durations_roa_duration_rangesToroa_durations_afterglow_id roa_durations[] @relation("roa_duration_rangesToroa_durations_afterglow_id")
  roa_durations_roa_duration_rangesToroa_durations_comeup_id    roa_durations[] @relation("roa_duration_rangesToroa_durations_comeup_id")
  roa_durations_roa_duration_rangesToroa_durations_duration_id  roa_durations[] @relation("roa_duration_rangesToroa_durations_duration_id")
  roa_durations_roa_duration_rangesToroa_durations_offset_id    roa_durations[] @relation("roa_duration_rangesToroa_durations_offset_id")
  roa_durations_roa_duration_rangesToroa_durations_onset_id     roa_durations[] @relation("roa_duration_rangesToroa_durations_onset_id")
  roa_durations_roa_duration_rangesToroa_durations_peak_id      roa_durations[] @relation("roa_duration_rangesToroa_durations_peak_id")
  roa_durations_roa_duration_rangesToroa_durations_total_id     roa_durations[] @relation("roa_duration_rangesToroa_durations_total_id")
  roas                                                          roas[]

  @@index([id], map: "ix_roa_duration_ranges_id")
}

model roa_durations {
  id                                                                  Int                  @id @default(autoincrement())
  afterglow_id                                                        Int?
  comeup_id                                                           Int?
  duration_id                                                         Int?
  offset_id                                                           Int?
  onset_id                                                            Int?
  peak_id                                                             Int?
  total_id                                                            Int?
  roa_duration_ranges_roa_duration_rangesToroa_durations_afterglow_id roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_afterglow_id", fields: [afterglow_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges_roa_duration_rangesToroa_durations_comeup_id    roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_comeup_id", fields: [comeup_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges_roa_duration_rangesToroa_durations_duration_id  roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_duration_id", fields: [duration_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges_roa_duration_rangesToroa_durations_offset_id    roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_offset_id", fields: [offset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges_roa_duration_rangesToroa_durations_onset_id     roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_onset_id", fields: [onset_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges_roa_duration_rangesToroa_durations_peak_id      roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_peak_id", fields: [peak_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges_roa_duration_rangesToroa_durations_total_id     roa_duration_ranges? @relation("roa_duration_rangesToroa_durations_total_id", fields: [total_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roas                                                                roas[]

  @@index([id], map: "ix_roa_durations_id")
}

model roa_ranges {
  id                                        Int         @id @default(autoincrement())
  min                                       Float?
  max                                       Float?
  roa_doses_roa_doses_common_idToroa_ranges roa_doses[] @relation("roa_doses_common_idToroa_ranges")
  roa_doses_roa_doses_strong_idToroa_ranges roa_doses[] @relation("roa_doses_strong_idToroa_ranges")
  roa_doses_roa_doses_weak_idToroa_ranges   roa_doses[] @relation("roa_doses_weak_idToroa_ranges")
  roas                                      roas[]

  @@index([id], map: "ix_roa_ranges_id")
}

model roas {
  id                  Int                  @id @default(autoincrement())
  type                roatype?
  dose_id             Int?
  duration_id         Int?
  bioavailability_id  Int?
  half_life_id        Int?
  roa_ranges          roa_ranges?          @relation(fields: [bioavailability_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_doses           roa_doses?           @relation(fields: [dose_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_durations       roa_durations?       @relation(fields: [duration_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roa_duration_ranges roa_duration_ranges? @relation(fields: [half_life_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  drugs               drugs[]
  formulations        formulations[]

  @@index([id], map: "ix_roas_id")
}

model unit_values {
  id          Int           @id @default(autoincrement())
  value       Float
  units       String?       @db.VarChar(8)
  experiences experiences[]

  @@index([id], map: "ix_unit_values_id")
}

model users {
  email         String?       @unique(map: "ix_users_email") @db.VarChar(120)
  password_hash String?       @db.VarChar(128)
  ref           String?       @unique
  id            Int           @id @default(autoincrement())
  first_name    String?       @db.VarChar(32)
  last_name     String?       @db.VarChar(32)
  username      String?       @db.VarChar(32)
  birthday      DateTime?     @db.Date
  biometrics    biometrics[]
  experiences   experiences[]

  @@index([first_name], map: "ix_users_first_name")
  @@index([id], map: "ix_users_id")
  @@index([last_name], map: "ix_users_last_name")
  @@index([username], map: "ix_users_username")
}

enum experiencestate {
  planning
  started
  completed
  reflected
}

enum form {
  pill
  liquid
  botanical
  fungus
  powder
  tab
}

enum interactiontype {
  low_risk_synergy
  low_risk_no_synergy
  dangerous
  unpredictable
  reverse_synergy
}

enum roatype {
  oral
  sublingual
  buccal
  insufflated
  rectal
  transdermal
  subcutaneous
  intramuscular
  intravenous
  intrathecal
  smoked
  transconjunctival
}

enum sex {
  male
  female
  other
}

enum substancetype {
  cannabinoids
  empathogens
  stimulants
  psychedelics
  dissociatives
  depressants
  deliriants
  opioids
}

enum toxicity {
  liver
  neural
}
